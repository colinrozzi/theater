// Generated by `wit-bindgen` 0.35.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod ntwk {
  #[allow(dead_code)]
  pub mod theater {
    #[allow(dead_code, clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      /// Generic message type as bytes that can be serialized/deserialized
      pub type Json = _rt::Vec::<u8>;
      #[derive(Clone)]
      pub struct Event {
        pub event_type: _rt::String,
        pub parent: Option<u64>,
        pub data: Json,
      }
      impl ::core::fmt::Debug for Event {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Event").field("event-type", &self.event_type).field("parent", &self.parent).field("data", &self.data).finish()
        }
      }
      #[derive(Clone)]
      pub struct MetaEvent {
        pub hash: u64,
        pub event: Event,
      }
      impl ::core::fmt::Debug for MetaEvent {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("MetaEvent").field("hash", &self.hash).field("event", &self.event).finish()
        }
      }
      #[derive(Clone)]
      pub struct Chain {
        pub events: _rt::Vec::<MetaEvent>,
      }
      impl ::core::fmt::Debug for Chain {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Chain").field("events", &self.events).finish()
        }
      }

    }

    #[allow(dead_code, clippy::all)]
    pub mod runtime {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      pub type Json = super::super::super::ntwk::theater::types::Json;
      pub type Chain = super::super::super::ntwk::theater::types::Chain;
      #[allow(unused_unsafe, clippy::all)]
      pub fn log(msg: &str,){
        unsafe {
          let vec0 = msg;
          let ptr0 = vec0.as_ptr().cast::<u8>();
          let len0 = vec0.len();

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "ntwk:theater/runtime")]
          extern "C" {
            #[link_name = "log"]
            fn wit_import(_: *mut u8, _: usize, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, ){ unreachable!() }
          wit_import(ptr0.cast_mut(), len0);
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn send(actor_id: &str,msg: &Json,){
        unsafe {
          let vec0 = actor_id;
          let ptr0 = vec0.as_ptr().cast::<u8>();
          let len0 = vec0.len();
          let vec1 = msg;
          let ptr1 = vec1.as_ptr().cast::<u8>();
          let len1 = vec1.len();

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "ntwk:theater/runtime")]
          extern "C" {
            #[link_name = "send"]
            fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, ){ unreachable!() }
          wit_import(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1);
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn spawn(manifest_path: &str,){
        unsafe {
          let vec0 = manifest_path;
          let ptr0 = vec0.as_ptr().cast::<u8>();
          let len0 = vec0.len();

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "ntwk:theater/runtime")]
          extern "C" {
            #[link_name = "spawn"]
            fn wit_import(_: *mut u8, _: usize, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, ){ unreachable!() }
          wit_import(ptr0.cast_mut(), len0);
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn get_chain() -> Chain{
        unsafe {
          #[repr(align(4))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 8]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
          let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "ntwk:theater/runtime")]
          extern "C" {
            #[link_name = "get-chain"]
            fn wit_import(_: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = *ptr0.add(0).cast::<*mut u8>();
          let l2 = *ptr0.add(4).cast::<usize>();
          let base12 = l1;
          let len12 = l2;
          let mut result12 = _rt::Vec::with_capacity(len12);
          for i in 0..len12 {
            let base = base12.add(i * 40);
            let e12 = {
              let l3 = *base.add(0).cast::<i64>();
              let l4 = *base.add(8).cast::<*mut u8>();
              let l5 = *base.add(12).cast::<usize>();
              let len6 = l5;
              let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
              let l7 = i32::from(*base.add(16).cast::<u8>());
              let l9 = *base.add(32).cast::<*mut u8>();
              let l10 = *base.add(36).cast::<usize>();
              let len11 = l10;

              super::super::super::ntwk::theater::types::MetaEvent{
                hash: l3 as u64,
                event: super::super::super::ntwk::theater::types::Event{
                  event_type: _rt::string_lift(bytes6),
                  parent: match l7 {
                    0 => None,
                    1 => {
                      let e = {
                        let l8 = *base.add(24).cast::<i64>();

                        l8 as u64
                      };
                      Some(e)
                    }
                    _ => _rt::invalid_enum_discriminant(),
                  },
                  data: _rt::Vec::from_raw_parts(l9.cast(), len11, len11),
                },
              }
            };
            result12.push(e12);
          }
          _rt::cabi_dealloc(base12, len12 * 40, 8);
          super::super::super::ntwk::theater::types::Chain{
            events: result12,
          }
        }
      }

    }

  }
}
#[allow(dead_code)]
pub mod exports {
  #[allow(dead_code)]
  pub mod ntwk {
    #[allow(dead_code)]
    pub mod theater {
      #[allow(dead_code, clippy::all)]
      pub mod actor {
        #[used]
        #[doc(hidden)]
        static __FORCE_SECTION_REF: fn() =
        super::super::super::super::__link_custom_section_describing_imports;
        
        use super::super::super::super::_rt;
        pub type Json = super::super::super::super::ntwk::theater::types::Json;
        pub type Event = super::super::super::super::ntwk::theater::types::Event;
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_handle_cabi<T: Guest>(arg0: *mut u8,arg1: usize,arg2: i32,arg3: i64,arg4: *mut u8,arg5: usize,arg6: *mut u8,arg7: usize,) -> *mut u8 {#[cfg(target_arch="wasm32")]
        _rt::run_ctors_once();let len0 = arg1;
        let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
        let len1 = arg5;
        let len2 = arg7;
        let result3 = T::handle(super::super::super::super::ntwk::theater::types::Event{
          event_type: _rt::string_lift(bytes0),
          parent: match arg2 {
            0 => None,
            1 => {
              let e = arg3 as u64;
              Some(e)
            }
            _ => _rt::invalid_enum_discriminant(),
          },
          data: _rt::Vec::from_raw_parts(arg4.cast(), len1, len1),
        }, _rt::Vec::from_raw_parts(arg6.cast(), len2, len2));
        let ptr4 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
        let vec5 = (result3).into_boxed_slice();
        let ptr5 = vec5.as_ptr().cast::<u8>();
        let len5 = vec5.len();
        ::core::mem::forget(vec5);
        *ptr4.add(4).cast::<usize>() = len5;
        *ptr4.add(0).cast::<*mut u8>() = ptr5.cast_mut();
        ptr4
      }
      #[doc(hidden)]
      #[allow(non_snake_case)]
      pub unsafe fn __post_return_handle<T: Guest>(arg0: *mut u8,) {
        let l0 = *arg0.add(0).cast::<*mut u8>();
        let l1 = *arg0.add(4).cast::<usize>();
        let base2 = l0;
        let len2 = l1;
        _rt::cabi_dealloc(base2, len2 * 1, 1);
      }
      #[doc(hidden)]
      #[allow(non_snake_case)]
      pub unsafe fn _export_init_cabi<T: Guest>() -> *mut u8 {#[cfg(target_arch="wasm32")]
      _rt::run_ctors_once();let result0 = T::init();
      let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
      let vec2 = (result0).into_boxed_slice();
      let ptr2 = vec2.as_ptr().cast::<u8>();
      let len2 = vec2.len();
      ::core::mem::forget(vec2);
      *ptr1.add(4).cast::<usize>() = len2;
      *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
      ptr1
    }
    #[doc(hidden)]
    #[allow(non_snake_case)]
    pub unsafe fn __post_return_init<T: Guest>(arg0: *mut u8,) {
      let l0 = *arg0.add(0).cast::<*mut u8>();
      let l1 = *arg0.add(4).cast::<usize>();
      let base2 = l0;
      let len2 = l1;
      _rt::cabi_dealloc(base2, len2 * 1, 1);
    }
    pub trait Guest {
      fn handle(evt: Event,state: Json,) -> Json;
      fn init() -> Json;
    }
    #[doc(hidden)]

    macro_rules! __export_ntwk_theater_actor_cabi{
      ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

        #[export_name = "ntwk:theater/actor#handle"]
        unsafe extern "C" fn export_handle(arg0: *mut u8,arg1: usize,arg2: i32,arg3: i64,arg4: *mut u8,arg5: usize,arg6: *mut u8,arg7: usize,) -> *mut u8 {
          $($path_to_types)*::_export_handle_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
        }
        #[export_name = "cabi_post_ntwk:theater/actor#handle"]
        unsafe extern "C" fn _post_return_handle(arg0: *mut u8,) {
          $($path_to_types)*::__post_return_handle::<$ty>(arg0)
        }
        #[export_name = "ntwk:theater/actor#init"]
        unsafe extern "C" fn export_init() -> *mut u8 {
          $($path_to_types)*::_export_init_cabi::<$ty>()
        }
        #[export_name = "cabi_post_ntwk:theater/actor#init"]
        unsafe extern "C" fn _post_return_init(arg0: *mut u8,) {
          $($path_to_types)*::__post_return_init::<$ty>(arg0)
        }
      };);
    }
    #[doc(hidden)]
    pub(crate) use __export_ntwk_theater_actor_cabi;
    #[repr(align(4))]
    struct _RetArea([::core::mem::MaybeUninit::<u8>; 8]);
    static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 8]);

  }

}
}
}
mod _rt {
  pub use alloc_crate::vec::Vec;
  pub use alloc_crate::string::String;
  pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
    if cfg!(debug_assertions) {
      String::from_utf8(bytes).unwrap()
    } else {
      String::from_utf8_unchecked(bytes)
    }
  }
  pub unsafe fn invalid_enum_discriminant<T>() -> T {
    if cfg!(debug_assertions) {
      panic!("invalid enum discriminant")
    } else {
      core::hint::unreachable_unchecked()
    }
  }
  pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
    if size == 0 {
      return;
    }
    let layout = alloc::Layout::from_size_align_unchecked(size, align);
    alloc::dealloc(ptr, layout);
  }
  
  #[cfg(target_arch = "wasm32")]
  pub fn run_ctors_once() {
    wit_bindgen::rt::run_ctors_once();
  }
  extern crate alloc as alloc_crate;
  pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_simple_actor_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::ntwk::theater::actor::__export_ntwk_theater_actor_cabi!($ty with_types_in $($path_to_types_root)*::exports::ntwk::theater::actor);
  )
}
#[doc(inline)]
pub(crate) use __export_simple_actor_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.35.0:ntwk:theater:simple-actor:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 606] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xdb\x03\x01A\x02\x01\
A\x09\x01B\x0a\x01p}\x04\0\x04json\x03\0\0\x01kw\x01r\x03\x0aevent-types\x06pare\
nt\x02\x04data\x01\x04\0\x05event\x03\0\x03\x01r\x02\x04hashw\x05event\x04\x04\0\
\x0ameta-event\x03\0\x05\x01p\x06\x01r\x01\x06events\x07\x04\0\x05chain\x03\0\x08\
\x03\0\x12ntwk:theater/types\x05\0\x02\x03\0\0\x04json\x02\x03\0\0\x05chain\x01B\
\x0c\x02\x03\x02\x01\x01\x04\0\x04json\x03\0\0\x02\x03\x02\x01\x02\x04\0\x05chai\
n\x03\0\x02\x01@\x01\x03msgs\x01\0\x04\0\x03log\x01\x04\x01@\x02\x08actor-ids\x03\
msg\x01\x01\0\x04\0\x04send\x01\x05\x01@\x01\x0dmanifest-paths\x01\0\x04\0\x05sp\
awn\x01\x06\x01@\0\0\x03\x04\0\x09get-chain\x01\x07\x03\0\x14ntwk:theater/runtim\
e\x05\x03\x02\x03\0\0\x05event\x01B\x0a\x02\x03\x02\x01\x01\x04\0\x04json\x03\0\0\
\x02\x03\x02\x01\x04\x04\0\x05event\x03\0\x02\x01k\x01\x04\0\x08response\x03\0\x04\
\x01@\x02\x03evt\x03\x05state\x01\0\x01\x04\0\x06handle\x01\x06\x01@\0\0\x01\x04\
\0\x04init\x01\x07\x04\0\x12ntwk:theater/actor\x05\x05\x04\0\x19ntwk:theater/sim\
ple-actor\x04\0\x0b\x12\x01\0\x0csimple-actor\x03\0\0\0G\x09producers\x01\x0cpro\
cessed-by\x02\x0dwit-component\x070.220.0\x10wit-bindgen-rust\x060.35.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}


# Example of using the HTTP Framework in Theater

name = "http-framework-example"
component_path = "examples/http_framework_example.wasm"

[interface]
implements = "ntwk:theater/actor"
requires = []

# Include the HTTP Framework handler
# This enables the HTTP Framework API for this actor
[[handlers]]
type = "http-framework"
config = {}

# No need to define ports - the actor will create and manage
# its own HTTP servers through the HTTP Framework API

# Sample Usage (in Rust):
#
# use ntwk::theater::host::http_framework;
# use ntwk::theater::host::http_handlers;
# 
# pub fn setup_server() -> Result<u64, String> {
#   // Create a new HTTP server
#   let config = http_framework::ServerConfig {
#       port: Some(8080),
#       host: Some("0.0.0.0".to_string()),
#       tls_config: None,
#   };
#   let server_id = http_framework::create_server(config)?;
#   
#   // Register handlers
#   let users_handler_id = http_framework::register_handler("handle_users")?;
#   let auth_middleware_id = http_framework::register_handler("auth_middleware")?;
#   let ws_handler_id = http_framework::register_handler("handle_ws")?;
#   
#   // Add middleware
#   http_framework::add_middleware(server_id, "/api", auth_middleware_id)?;
#   
#   // Add routes
#   http_framework::add_route(server_id, "/api/users", "GET", users_handler_id)?;
#   http_framework::add_route(server_id, "/api/users", "POST", users_handler_id)?;
#   
#   // Enable WebSocket
#   http_framework::enable_websocket(
#       server_id,
#       "/ws",
#       None, // No connect handler
#       ws_handler_id,
#       None, // No disconnect handler
#   )?;
#   
#   // Start server
#   let actual_port = http_framework::start_server(server_id)?;
#   println!("Server started on port {}", actual_port);
#   
#   Ok(server_id)
# }

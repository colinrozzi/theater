searchState.loadedDescShard("theater_cli", 0, "Build a Theater actor to WebAssembly\nChannel operations\nTheater CLI - A WebAssembly actor system that enables …\nShared context for command execution\nGenerate shell completion scripts\nCreate a new Theater actor project\nGenerate dynamic completions (internal use)\nGet actor events (from running actor or filesystem)\nInteractively explore actor events with TUI\nInspect a running actor (detailed view)\nList all running actors\nList stored actor IDs\nSend a message to an actor\nStart or deploy an actor from a manifest\nGet actor state\nStop a running actor\nSubscribe to real-time events from an actor\nCreate a theater client using the configured server address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDisplay output in JSON format\nRun the Theater CLI asynchronously with cancellation …\nGet the server address from config or override\nTurn on verbose output\nA connection to the Theater server with automatic …\nHigh-level client for Theater server operations with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCLI wrapper around theater-client with timeout and retry …\nGet the server address\nEnsure we’re connected with retry logic\nReturns the argument unchanged.\nGet actor state with CLI error handling\nCalls <code>U::from(self)</code>.\nCheck if connected\nList all actors with CLI error handling\nCreate a new CLI client\nReceive the next response (for streaming operations)\nSend a command and receive a response with CLI timeout and …\nSend a command without waiting for response (fire and …\nStop an actor with CLI error handling\nA connection to the Theater server with automatic …\nGet the server address\nClose the connection\nEstablish a new connection to the server\nEnsure we have an active connection, reconnecting if …\nCheck if the connection is currently active\nGet the last connection error, if any\nGet the next response from the connection (for streaming …\nSend a command and wait for a response\nSend a command without waiting for a response\nTest if the current connection is working\nA stream of events from an actor with cancellation support\nHigh-level client for Theater server operations with …\nGet the actor ID this stream is associated with\nGet the server address\nClose the connection\nClose a channel\nExplicitly connect to the server (usually not needed as …\nReturns the argument unchanged.\nGet actor events\nGet actor state\nGet actor status\nCalls <code>U::from(self)</code>.\nCheck if connected to the server\nList all running actors\nCreate a new TheaterClient with cancellation support\nGet the next event from the stream\nGet the next response from the connection (for streaming …\nOpen a channel with an actor\nReceive channel message (for channel communication)\nSend a request to an actor and wait for response\nRestart an actor\nSend a message to an actor (fire and forget)\nSend a message on a channel\nStart an actor from a manifest\nStop a running actor (graceful shutdown)\nSubscribe to events from an actor (returns a stream-like …\nGet the subscription ID\nTerminate an actor immediately (forceful shutdown)\nUnsubscribe from this event stream\nUnsubscribe from actor events\nUpdate actor component\nExecute an operation with cancellation support\nClean the target directory before building\nExecute the build command asynchronously (modernized)\nReturns the argument unchanged.\nExtract the package name from Cargo.toml\nCalls <code>U::from(self)</code>.\nCheck if cargo-component is installed\nDirectory containing the actor project\nBuild in release mode\nRun a command and return the status, stdout, and stderr\nOpen an interactive channel session with an actor\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nID of the actor to open a channel with\nAddress of the theater server\nLegacy wrapper for backward compatibility\nExecute the channel open command asynchronously …\nFile containing initial message to send\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInitial message to send when opening the channel\nGenerate shell completion scripts\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOutput file (defaults to stdout)\nShell to generate completions for\nShow installation instructions for the generated …\nBuild the project to validate it works\nCheck if cargo component is installed\nExecute the create command asynchronously (modernized)\nFetch WIT dependencies using wkg\nReturns the argument unchanged.\nInitialize a git repository and make the first commit\nInitialize a git repository and make the first commit\nCalls <code>U::from(self)</code>.\nName of the new actor project\nSkip git repository initialization (opposite of –git)\nOutput directory to create the project in\nDetermine if we should initialize git by default (when git …\nSkip automatic cargo component check\nSkip automatic dependency fetching\nTemplate to use for the new actor (available: basic, …\nTry using wasm-tools or other methods to fetch dependencies\nAddress of the theater server for dynamic completions\nThe current word being completed\nGenerate dynamic completions based on current theater state\nReturns the argument unchanged.\nGenerate completions based on context\nGet running actor ID completions\nGet available command completions\nGet manifest file completions\nGet running actor IDs from the server\nGet shell completions\nGet stored actor IDs from filesystem\nGet template completions\nCalls <code>U::from(self)</code>.\nThe command line being completed\nGet events for an actor (falls back to filesystem if actor …\nID of the actor to get events from\nAddress of the theater server\nApply various filters to the events\nApply sorting to the events\nShow detailed event information\nFilter events by type (e.g., http.request, runtime.init)\nExecute the events command asynchronously with modern …\nReturns the argument unchanged.\nShow events from this timestamp onward (Unix timestamp or …\nCalls <code>U::from(self)</code>.\nNumber of events to show (0 for all)\nReverse the sort order\nSearch events for this text (in description and data)\nSort events (chain, time, type, size)\nShow events until this timestamp (Unix timestamp or …\nInteractively explore actor events with a rich TUI …\nID of the actor to explore events for\nAddress of the theater server\nApply filters to events (reused from events command)\nFilter events by type (e.g., http.request, runtime.init)\nExecute the events explore command asynchronously\nStart in follow mode (auto-scroll new events)\nReturns the argument unchanged.\nShow events from this timestamp onward (Unix timestamp or …\nCalls <code>U::from(self)</code>.\nNumber of events to load initially (0 for all)\nConnect to running actor for live events\nLoad events from either live actor or stored data\nLoad events from filesystem/stored data\nSearch events for this text (in description and data)\nShow events until this timestamp (Unix timestamp or …\nActor ID to inspect\nAddress of the theater server\nShow detailed information\nExecute the inspect command asynchronously (modernized)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAddress of the theater server\nExecute the list command asynchronously with cancellation …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDirectory where chains are stored (defaults to …\nExecute the list-stored command asynchronously with modern …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nID of the actor to send a message to\nAddress of the theater server\nExecute the message command asynchronously with modern …\nFile containing message to send\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMessage to send (as string)\nSend as a request (awaits response) instead of a one-way …\nAddress of the theater server\nEvent fields to include (comma-separated: …\nExecute the start command with variable substitution …\nReturns the argument unchanged.\nCheck if the manifest content contains variable references\nInitial state as JSON string or path to JSON file\nCalls <code>U::from(self)</code>.\nPath or URL to the actor manifest file\nAct as the actor’s parent\nSubscribe to actor events\nEnable Unix-style signal handling (SIGINT/SIGKILL)\nShow detailed startup information instead of just actor ID\nWrite actor result to stdout\nID of the actor to get state from\nAddress of the theater server\nExecute the state command asynchronously with modern …\nOutput format (raw, json, pretty)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nID of the actor to stop\nAddress of the theater server\nExecute the stop command asynchronously with modern …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nID of the actor to subscribe to events from (use “-” …\nAddress of the theater server\nShow detailed event information\nFilter events by type (e.g., http.request, filesystem.read)\nExecute the subscribe command asynchronously (modernized)\nOutput format (pretty, compact, json)\nReturns the argument unchanged.\nShow historical events before subscribing to new events\nNumber of historical events to show (0 for all)\nCalls <code>U::from(self)</code>.\nMaximum number of events to show (0 for unlimited)\nExit after timeout seconds with no events (0 for no …\nTheater CLI configuration\nApply environment variable overrides\nGet the cache directory for this user\nGet the config directory for this user\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad configuration from the standard locations\nLoad configuration from a specific file\nSave configuration to the default location\nGet the state directory for this user\nActor-related errors\nMain error type for the Theater CLI\nResult type alias for CLI operations\nConnection-related errors\nContains the error value\nEvent and monitoring errors\nI/O and filesystem errors\nGeneric wrapper for other errors\nExtension trait for converting common errors to CliError\nValidation errors\nManifest and configuration errors\nProject and build errors\nNetwork and protocol specific errors\nContains the success value\nCancellation errors\nServer and protocol errors\nTemplate errors\nCreate an actor not found error\nCreate a build failed error\nGet the error category for metrics/logging\nCreate a connection failed error\nCreate a file operation failed error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate an invalid actor ID error\nCreate an invalid input error with helpful suggestions\nCreate an invalid manifest error\nCheck if this error suggests the user should retry\nCreate a management error from a Theater server error\nCreate a not implemented error\nCreate a template not found error\nGet a user-friendly error message with potential solutions\nTrait for types that can be formatted in different ways\nMain output handler for the CLI\nA progress bar wrapper with consistent styling\nTheme for consistent CLI styling\nGet the output configuration\nPrint an error message\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPrint an info message\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrint formatted output based on the configured format\nCreate a progress bar\nPrint a success message\nPrint a table with headers and rows\nGet the terminal\nGet the theme\nPrint a warning message\nActor action result formatter (for start, stop, restart …\nActor events formatter\nActor inspection formatter\nActor list formatter\nActor logs formatter\nActor started formatter\nActor state formatter\nBuild result formatter\nChannel opened formatter\nComponent update result formatter\nEvent subscription formatter\nMessage response formatter (for request/response)\nMessage sent result formatter\nProject creation formatter\nServer information formatter\nServer started formatter\nStored actor list formatter\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA progress bar wrapper with consistent styling\nAbandon the progress bar (useful for error cases)\nFinish the progress bar\nFinish the progress bar with a message\nIncrement the position\nCheck if the progress bar is finished\nCreate an indeterminate progress bar (spinner)\nSet the message\nSet the current position\nTheme for consistent CLI styling\nCreate a colored theme\nCreate a plain theme (no colors)\nCombined template info with files for internal use\nTemplate data for rendering\nTemplate metadata loaded from template.toml\nAvailable templates for creating new actors\nCreate a new actor project from a template\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all available templates\nLoad template metadata from template.toml\nGet the path to the templates directory\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRender a preview of the data (first few lines)\nStringify bytes into a readable format\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStructure for configuring event display options\nCreate a CSV header row\nDisplay a batch of events with formatting options\nDisplay a timeline view of events\nDisplay a single event with formatting options\nDisplay a single event in structured format for Unix …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse event fields from comma-separated string\nHelper function to pretty-stringify an event for the …\nHelper function to print a hex dump of binary data\nFormat a duration in a human-readable form\nFormat an error message\nFormat an event summary\nFormat a byte array as a hex string with optional …\nFormat an actor ID in a consistent way\nFormat a warning message\nFormat a key-value pair for display\nFormat a section header\nFormat a short version of an actor ID (first 8 chars)\nFormat an actor status with appropriate color\nFormat a success message\nCreate a table with headers and rows\nFormat a timestamp as a human-readable date/time\nFormat a warning message")
package ntwk:theater;

// # Common Type Definitions
//
// Defines shared types used across multiple interfaces in the Theater system.
// This interface serves as a central location for type definitions to ensure
// consistency and avoid duplication.
//
// ## Purpose
//
// The types interface provides common data structures and type aliases used 
// throughout the Theater system. These types represent core concepts such as:
//
// - Actor state
// - Message formats
// - Event chain structures
// - Identifiers
//
// By centralizing these definitions, the system maintains type consistency
// across different interfaces and components.
//
// ## Example
//
// These types are typically imported and used in actor implementations:
//
// ```rust
// use ntwk::theater::types::{state, json, actor_id};
//
// // Using the state type for actor state
// fn process_state(current_state: state) -> Result<state, String> {
//     // Process the state
//     Ok(current_state)
// }
//
// // Using the json type for serialized data
// fn create_message() -> json {
//     serde_json::to_vec(&MyMessage { value: 42 }).unwrap()
// }
//
// // Using actor-id for referring to actors
// fn get_actor_info(id: actor_id) -> String {
//     format!("Info for actor {}", id)
// }
// ```
//
// ## Implementation Notes
//
// - Most types are designed to be serialization-format agnostic
// - The `list<u8>` (byte array) representation allows for flexible serialization
// - Actors typically use serde-compatible formats for serialization/deserialization

// Define a shared type for messages
interface types {
    /// Generic message type as bytes that can be serialized/deserialized
    /// 
    /// Represents JSON-encoded data as a byte array. This type is used for
    /// passing structured data between components that may need to be serialized
    /// and deserialized.
    type json = list<u8>;
    
    /// Actor state represented as an optional byte array
    ///
    /// This type represents the current state of an actor. The state is:
    /// - None when an actor is first initialized and has no state yet
    /// - Some(bytes) containing serialized state data when the actor has state
    type state = option<list<u8>>;

    /// Unique identifier for an actor
    ///
    /// Actors are identified by string identifiers throughout the system. These
    /// identifiers are typically UUIDs or other unique strings.
    type actor-id = string;
    
    /// Unique identifier for a channel
    ///
    /// Channels are communication pathways between actors or between actors and
    /// external systems. They are identified by string identifiers.
    type channel-id = string;
    
    /// Response to a channel connection request
    ///
    /// When an actor is asked to accept a channel connection, it responds with
    /// this structure to indicate acceptance and provide an optional initial message.
    record channel-accept {
        /// Whether the channel connection was accepted
        accepted: bool,
        /// Optional initial message to send on the channel
        message: option<json>,
    }

    /// Complete event chain for an actor
    ///
    /// Represents the full history of events that have occurred in an actor,
    /// providing traceability and auditability.
    record chain {
        /// List of events in the chain, each with metadata
        events: list<meta-event>
    }

    /// Event with associated metadata
    ///
    /// Represents a single event in the chain with its metadata (hash),
    /// allowing for verification and referencing.
    record meta-event {
        /// Hash of the event, used for verification and referencing
        hash: u64,
        /// The actual event data
        event: event,
    }

    /// Core event structure
    ///
    /// Represents a single event in an actor's history, including its type,
    /// parent reference, and associated data.
    record event {
        /// Type of event (e.g., "http", "message", "wasm")
        event-type: string,
        /// Optional reference to parent event (previous in chain)
        parent: option<u64>,
        /// Serialized event data
        data: json,
    }
}

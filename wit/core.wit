package ntwk:theater;

// Define a shared type for messages
interface types {
    /// Generic message type as bytes that can be serialized/deserialized
    type json = list<u8>;

    record chain {
        events: list<meta-event>
    }

    record meta-event {
        hash: u64,
        event: event,
    }

    record event {
        event-type: string,
        parent: option<u64>,
        data: json,
    }
}

interface runtime {
    use types.{json, chain};

    log: func(msg: string) -> ();
    send: func(actor-id: string, msg: json) -> ();
    spawn: func(manifest-path: string) -> ();
    get-chain: func() -> chain;
}

interface actor {
    use types.{json, event};

    type response = option<json>;
    
    handle: func(evt: event, state: json) -> json;
    init: func() -> json;
}

world simple-actor {
    import runtime;
    export actor;
}

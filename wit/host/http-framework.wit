package ntwk:theater;

/// The HTTP framework interface provides a comprehensive API for creating,
/// configuring, and managing HTTP and WebSocket servers from within WebAssembly actors.
interface http-framework {
    use types.{state};
    use http-types.{http-request, http-response};
    use host:http-types.{server-config, server-info, tls-config};
    
    // Core types
    type server-id = u64;
    type handler-id = u64;
    type route-id = u64;
    type middleware-id = u64;
    
    // Server lifecycle
    /// Create a new HTTP server with the given configuration
    create-server: func(config: server-config) -> result<server-id, string>;
    
    /// Get information about a server
    get-server-info: func(server-id: server-id) -> result<server-info, string>;
    
    /// Start a server
    start-server: func(server-id: server-id) -> result<u16, string>;
    
    /// Stop a server
    stop-server: func(server-id: server-id) -> result<_, string>;
    
    /// Remove a server completely
    destroy-server: func(server-id: server-id) -> result<_, string>;
    
    // Handler registration
    /// Register a handler by name (the name is used to identify the handler function in the component)
    register-handler: func(handler-name: string) -> result<handler-id, string>;
    
    // Route management
    /// Add a route to a server
    add-route: func(server-id: server-id, path: string, method: string, handler-id: handler-id) -> result<route-id, string>;
    
    /// Remove a route
    remove-route: func(route-id: route-id) -> result<_, string>;
    
    // Middleware
    /// Add middleware to a server path
    add-middleware: func(server-id: server-id, path: string, handler-id: handler-id) -> result<middleware-id, string>;
    
    /// Remove middleware
    remove-middleware: func(middleware-id: middleware-id) -> result<_, string>;
    
    // WebSocket support
    /// Enable WebSocket support on a path
    enable-websocket: func(
        server-id: server-id, 
        path: string, 
        connect-handler-id: option<handler-id>,
        message-handler-id: handler-id,
        disconnect-handler-id: option<handler-id>
    ) -> result<_, string>;
    
    /// Disable WebSocket support on a path
    disable-websocket: func(server-id: server-id, path: string) -> result<_, string>;
    
    /// Send a message to a specific WebSocket connection
    send-websocket-message: func(server-id: server-id, connection-id: u64, message: websocket-message) -> result<_, string>;
    
    /// Close a specific WebSocket connection
    close-websocket: func(server-id: server-id, connection-id: u64) -> result<_, string>;
}

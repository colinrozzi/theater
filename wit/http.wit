package ntwk:theater;

/// The HTTP framework interface provides a comprehensive API for creating,
/// configuring, and managing HTTP and WebSocket servers from within WebAssembly actors.
interface http-framework {
    use types.{state};
    use http-types.{http-request, http-response};
    use http-types.{server-config, server-info, tls-config};
    use websocket-types.{websocket-message};
    
    // Core types
    type server-id = u64;
    type handler-id = u64;
    type route-id = u64;
    type middleware-id = u64;
    
    // Server lifecycle
    /// Create a new HTTP server with the given configuration
    create-server: func(config: server-config) -> result<server-id, string>;
    
    /// Get information about a server
    get-server-info: func(server-id: server-id) -> result<server-info, string>;
    
    /// Start a server
    start-server: func(server-id: server-id) -> result<u16, string>;
    
    /// Stop a server
    stop-server: func(server-id: server-id) -> result<_, string>;
    
    /// Remove a server completely
    destroy-server: func(server-id: server-id) -> result<_, string>;
    
    // Handler registration
    /// Register a handler by name (the name is used to identify the handler function in the component)
    register-handler: func(handler-name: string) -> result<handler-id, string>;
    
    // Route management
    /// Add a route to a server
    add-route: func(server-id: server-id, path: string, method: string, handler-id: handler-id) -> result<route-id, string>;
    
    /// Remove a route
    remove-route: func(route-id: route-id) -> result<_, string>;
    
    // Middleware
    /// Add middleware to a server path
    add-middleware: func(server-id: server-id, path: string, handler-id: handler-id) -> result<middleware-id, string>;
    
    /// Remove middleware
    remove-middleware: func(middleware-id: middleware-id) -> result<_, string>;
    
    // WebSocket support
    /// Enable WebSocket support on a path
    enable-websocket: func(
        server-id: server-id, 
        path: string, 
        connect-handler-id: option<handler-id>,
        message-handler-id: handler-id,
        disconnect-handler-id: option<handler-id>
    ) -> result<_, string>;
    
    /// Disable WebSocket support on a path
    disable-websocket: func(server-id: server-id, path: string) -> result<_, string>;
    
    /// Send a message to a specific WebSocket connection
    send-websocket-message: func(server-id: server-id, connection-id: u64, message: websocket-message) -> result<_, string>;
    
    /// Close a specific WebSocket connection
    close-websocket: func(server-id: server-id, connection-id: u64) -> result<_, string>;
}


/// The HTTP handlers interface defines the callback functions that are used
/// to handle HTTP requests and WebSocket events.
interface http-handlers {
    use types.{state};
    use http-types.{http-request, http-response};
    use websocket-types.{websocket-message};
    use http-types.{middleware-result};
    use http-framework.{handler-id};
    
    /// Called to handle an HTTP request
    handle-request: func(state: state, params: tuple<handler-id, http-request>) -> result<tuple<state, tuple<http-response>>, string>;
    
    /// Called to process a request through middleware
    handle-middleware: func(state: state, params: tuple<handler-id, http-request>) -> result<tuple<state, tuple<middleware-result>>, string>;
    
    /// Called when a WebSocket connection is established
    handle-websocket-connect: func(state: state, params: tuple<handler-id, u64, string, option<string>>) -> result<tuple<state>, string>;
    
    /// Called when a WebSocket message is received
    handle-websocket-message: func(state: state, params: tuple<handler-id, u64, websocket-message>) -> result<tuple<state, tuple<list<websocket-message>>>, string>;
    
    /// Called when a WebSocket connection is closed
    handle-websocket-disconnect: func(state: state, params: tuple<handler-id, u64>) -> result<tuple<state>, string>;
}


/// Types used by the HTTP framework
interface http-types {
    type bytes = list<u8>;

    record http-request {
        method: string,
        uri: string,
        headers: list<tuple<string, string>>,
        body: option<bytes>
    }

    record http-response {
        status: u16,
        headers: list<tuple<string, string>>,
        body: option<bytes>
    }
    
    /// Configuration for an HTTP server
    record server-config {
        /// Port to listen on, 0 means system-assigned
        port: option<u16>,
        /// Host address to bind to
        host: option<string>,
        /// TLS configuration
        tls-config: option<tls-config>,
    }
    
    /// TLS configuration
    record tls-config {
        /// Path to the certificate file
        cert-path: string,
        /// Path to the key file
        key-path: string,
    }
    
    /// Information about a server
    record server-info {
        /// Server ID
        id: u64,
        /// Current listening port
        port: u16,
        /// Host address
        host: string,
        /// Whether the server is running
        running: bool,
        /// Number of active routes
        routes-count: u32,
        /// Number of active middleware
        middleware-count: u32,
        /// Whether WebSocket is enabled
        websocket-enabled: bool,
    }
    
    /// Result from middleware processing
    record middleware-result {
        /// Whether to continue processing the request
        proceed: bool,
        /// The modified request
        request: http-request,
    }
}

/// Types used for WebSocket communication
interface websocket-types {
    /// The type of WebSocket message/event
    variant message-type {
        /// A text message
        text,
        /// A binary message
        binary,
        /// A new connection was established
        connect,
        /// The connection was closed
        close,
        /// A ping message (for keep-alive)
        ping,
        /// A pong message (response to ping)
        pong,
        /// Any other message type
        other(string),
    }

    /// Represents a message sent or received over a WebSocket connection
    record websocket-message {
        /// The type of the message
        ty: message-type,
        /// Binary data payload (used for binary messages)
        data: option<list<u8>>,
        /// Text payload (used for text messages)
        text: option<string>,
    }
}
